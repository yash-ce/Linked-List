#include <iostream>
#include <bits/stdc++.h>

using namespace std;

class node{
    public:
    int val;
    node *next;

    node(int num){
        val = num;
        next = NULL;

    }
};

void insertAtTail(node* &head, int val){
    node* n = new node(val);
    node* temp = head;

    if(head == NULL){
        head = n;
        return;
    }

    while(temp->next != NULL){
        temp = temp->next;
    }
    temp->next = n;
}

void display(node* head){
    node* temp = head;
    while (temp != NULL)
    {
        /* code */
        cout<<temp->val<< " ";
        temp = temp->next;
    }
    cout<< endl;
}

void deleteAtHead(node* &head){
    node* todelete = head;
    head = head->next;
    delete todelete;
}

void deletion(node* &head, int val){
    if(head == NULL){
        return;
    }
    if(head->next == NULL){
        deleteAtHead(head);
        return;
    }
    node* temp = head;
    while(temp->next->val != val){
        temp = temp->next;
    }
    node* todelete = temp->next;
    temp->next = temp->next->next;
    delete todelete;

}

void insertAtHead(node* &head, int val){
    node* n = new node(val);
    node* temp = head;
    if(head == NULL){
        head = n;
        return;
    }
    n->next = head;
    head = n; 
}

// void deleteAtHead(node* &head){
//     node* todelete = head;
//     head = head->next;
//     delete todelete;
// }

// Iterative method
node* reverse(node* &head){
    // node* ptr = head;
    // node* prev = NULL;
    // node* next = NULL;
    // while(head != NULL){
    //     next = head->next;
    //     head->next = prev;
    //     prev = head;
    //     head = next;
    // }
    node* current = head;
    node* prev = NULL;
    node* next;
    while(current != NULL){
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;

}


node* reverseRecursive(node* &head){
    if(head == NULL || head->next == NULL){
        return head;
    }

    node* newNode = reverseRecursive(head->next);
    head->next->next = head;
    head->next = NULL;
    return newNode;
}


node* reversek(node* &head, int k){
    node* prevptr = NULL;
    node* currptr = head;
    node* nextptr;
    int count = 0;
    while(currptr != NULL && count < k){
        nextptr = currptr->next;
        currptr->next = prevptr;
        prevptr = currptr;
        currptr = nextptr;
        count++;
    }
    if(nextptr != NULL){
        head->next = reversek(nextptr, k);
    }
    
    return prevptr;
}



bool detectcycle(node* &head){
    if(head == NULL || head->next == NULL){
        return false;
    }

    node* slow = head;
    node* fast = head;

    while(fast != NULL && fast->next != NULL){
        slow = slow->next;
        fast = fast->next->next;
        if(fast == slow){
            return true;

        }
    }

    return false;

}


void makeCycle(node* &head, int pos){
    node* temp = head;
    node* startNode;

    int count=1;
    while(temp->next!=NULL){
        if(count==pos){
            startNode = temp;
        }
        temp = temp->next;
        count++;
    }
    temp->next = startNode;
}


void removeCycle(node* &head){
    node* fast = head;
    node* slow = head;
    do{

        slow = slow->next;
        fast = fast->next->next;
    } while (slow!=fast);

    fast = head;

    while(slow->next!=fast->next){
        slow=slow->next;
        fast=fast->next;
    }

    slow->next = NULL;
}

int main(){

    node* head = NULL;
    insertAtTail(head, 1);
    insertAtTail(head, 2);
    insertAtTail(head, 3);
    insertAtTail(head, 4);
    insertAtTail(head, 5);
    display(head);
    insertAtHead(head, 10);
    insertAtHead(head, 11);
    insertAtHead(head, 12);
    display(head);
    // deletion(head, 3);
    // display(head);
    // deleteAtHead(head);
    // display(head);
    // node* ptr = reverseRecursive(head);
    // display(ptr);
    // node* ptr1 = reverseRecursive(ptr);
    // display(ptr1);
    // int k = 2;
    // node* ptr2 = reversek(ptr1, k);
    // display(ptr2);
     makeCycle(head, 3);
    // display(head);
    bool s = detectcycle(head);
    cout<< s << endl;
    removeCycle(head);
    bool s1 = detectcycle(head);
    cout<< s1 << endl;
    return 0;
}
